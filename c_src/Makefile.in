SHELL = /bin/sh
VPATH = @srcdir@
 
top_srcdir = @top_srcdir@
srcdir = @srcdir@
prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = $(exec_prefix)/bin
infodir = $(prefix)/info
libdir = $(prefix)/lib/gnudl
mandir = $(prefix)/man/man1


ERL_INTERFACE=${ERLDIR}/lib/${ERL_INTERFACE}
PARSER_LIBS = $(srcdir)/parser/y.tab.o $(srcdir)/parser/lex.yy.o
INC_LIBS = -L@EI_LIB_DIR@ -lerl_interface -lei -lstdc++ -lcurses -lreadline -lhistory -lfl -lm -ll
EXECUTABLE_DIR = $(top_srcdir)/priv/bin

INCLUDE+=-I $(srcdir)/parser -I $(top_srcdir)/build/readline/include -I $(srcdir)/utils -I $(srcdir)/erl -I $(srcdir)/babysitter

ifeq ($(shell uname),Linux)
	ARCH=linux
	LDFLAGS=$(LDFLAGS_COMMON) 
else
	# -dynamic -undefined suppress -flat_namespace
	ARCH=macosx
	LDFLAGS=$(LDFLAGS_COMMON)
endif

# Defines
CC = g++
CPPFLAGS = @CPPFLAGS@ $(INCLUDE)
CFLAGS = $(CPPFLAGS) @CFLAGS@
LIBS = $(INC_LIBS)
TEST_SOURCES := $(wildcard check_*.cpp)
TEST_OBJECTS := $(patsubst %.cpp,%.o,$(TEST_SOURCES))
UNDER_TEST := $(patsubst check_%.cpp,%.o,$(TEST_SOURCES))
PACKAGE_NAME = @PACKAGE_NAME@
PACKAGE_VERSION = @PACKAGE_VERSION@

.SUFFIXES: .pc .cpp .c .o

CC=gcc
CXX=g++

MAKEMAKE=mm

SRCS=$(wildcard utils/*.cpp) $(wildcard erl/*.cpp) $(wildcard babysitter/*.cpp)
OBJS=$(patsubst %.cpp, %.o, $(patsubst %.c, %.o, $(SRCS)))
EXES=$(patsubst bin/%.cpp.o, %.o, $(wildcard bin/*.cpp))

# For generating makefile dependencies..
SHELL=/bin/sh

all: config_parser $(OBJS) $(EXES)

$(MAKEMAKE):
	@(rm -f $(MAKEMAKE))
	$(CXX) -M  $(CPPFLAGS) $(SRCS) > $(MAKEMAKE)

$(EXES): $(OBJS) clean_bins
	@echo "Creating a executable $(subst ,,$(subst .cpp,,$@))"
	$(CXX) $@ -o $(EXECUTABLE_DIR)/babysitter_$(subst bin/,,$(subst src/,,$(subst .cpp,,$@))) $(CPPFLAGS) $(PARSER_LIBS) $(OBJS) $(LIBS) $(LDFLAGS)

clean_bins:
	@(rm -rf $(top_srcdir)/priv/bin/*)

.cpp.o: $(SRCS) $(HDR)
	$(CXX) -c -o $*.o $(CPPFLAGS) $*.cpp

.c.o: $(SRCS) $(HDR)
	$(CC) -c -o $*.o $(CFLAGS) $*.c

config_parser: $(patsubst %.cpp, %.o, $(wildcard utils/*.cpp))
	@(cd ./parser;$(MAKE)) # make the config parser

clean:
	rm -rf *.o *.o $(OBJS) $(MAKEMAKE) test/*.o run_tests c_src/*/*.o
	@(cd parser && $(MAKE) clean)

clean_deps:
	rm -rf  build/*

# include Tests.makefile
